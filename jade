#! /usr/bin/env jruby

require 'optparse'
require 'fileutils'

require 'rubygems'
require 'rubygems/dependency_installer'
require 'rubygems/installer'

BUILD_DIR = File.join('/tmp', 'jading', 'build')
FileUtils::mkdir_p(BUILD_DIR)

Options = Struct.new(:paths, :gems, :libs)
options = Options.new([], ['cascading.jruby'], [File.join(BUILD_DIR, 'lib')])
option_parser = OptionParser.new do |opts|
  opts.banner  = <<END
Script used to produce a jade jar for execution via hadoop jar.  Any paths passed after the options are copied as-is into the root of the jade jar.

Example usage:
#{__FILE__} \\
  -g jruby-openssl \\
  -g json \\
  -l lib/operators/target/custom-cascading-operators-0.0.2.jar \\
  -l lib/operators/target/emr \\
  lib/jobs/helpers \\
  lib/ruby/cli.rb \\
  lib/ruby/barnum_date.rb \\
  lib/jobs/cascading/nightly/index_events.rb

Usage: #{__FILE__} [options] paths
END

  opts.on('-g', '--gem gem_name', 'Install and include named gem and dependencies in vendor/gems directory of jade jar') do |gem_name|
    options.gems << gem_name
  end

  opts.on('-l', '--lib path', 'Include files and directories (flattened) in lib directory of jade jar') do |path|
    options.libs << path
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end
option_parser.parse!(ARGV)
options.paths += ARGV

def unpack_gem(gem_name, target_dir)
  begin
    gem = Gem::Specification.find_by_name(gem_name)
    gems = [gem] + gem.dependent_specs
  rescue Gem::LoadError
    installer = Gem::DependencyInstaller.new
    gems = installer.install(gem_name)
  end

  gems.each do |gem|
    target = File.join(target_dir, gem.name)
    FileUtils::mkdir_p(target)

    installer = Gem::Installer.new(gem.cache_file)
    installer.unpack(File.expand_path(target))
  end
end

def copy_path(path, target_dir, params = {})
  raise "Path does not exist: '#{path}'" unless FileTest.exists?(path)
  flatten = params[:flatten]

  FileUtils::mkdir_p(target_dir)
  if FileTest.directory?(path)
    if flatten
      Dir.glob(File.join(path, '**', '*')).each do |subpath|
        # Only copies files into flatten target; does not follow symlinks or
        # copy hidden files
        FileUtils::cp(subpath, target_dir) if FileTest.file?(subpath)
      end
    else
      FileUtils::cp_r(path, target_dir)
    end
  elsif FileTest.file?(path)
    FileUtils::cp(path, target_dir)
  else
    raise "Unsupported path type: '#{path}'"
  end
end

FileUtils::rm_rf(File.join(BUILD_DIR, 'jar'))

# Guard ivy:resolve with properties file
resolved_properties = File.join(File.dirname(__FILE__), 'resolved.properties')
if File.exists?(resolved_properties) &&
  File.ctime(resolved_properties) > File.ctime(File.join(File.dirname(__FILE__), 'ivy.xml'))
  puts 'Ivy dependencies already resolved'
else
  raise 'Ant retrieve failed' unless system('ant retrieve-ivy')
  File.open(resolved_properties, 'w+') do |file|
    file << 'resolved=true'
  end
end

# Compile the Jading library
compile_success = system("ant -f #{File.join(File.dirname(__FILE__), 'build.xml')} compile")
raise "Failed to compile Jading" unless compile_success

options.gems.each do |gem_name|
  unpack_gem(gem_name, File.join(BUILD_DIR, 'jar', 'vendor', 'gems'))
end

options.libs.each do |path|
  copy_path(path, File.join(BUILD_DIR, 'jar', 'lib'), :flatten => true)
end

options.paths.each do |path|
  copy_path(path, File.join(BUILD_DIR, 'jar'))
end

# Build the jade jar in the current directory
jar_success = system("ant -f #{File.join(File.dirname(__FILE__), 'build.xml')} -Dexecution.dir=#{File.expand_path('.')} jade-jar")
raise "Failed to create jade jar" unless jar_success
